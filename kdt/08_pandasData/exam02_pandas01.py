# -*- coding: utf-8 -*-
"""exam02_pandas01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vHeqOhJQjvQzc4EjHX0IM3s4iz4gZyrN
"""

import pandas as pd
import openpyxl

"""## ***어쩌구***"""

df = pd.DataFrame([[15, '남', '영훈중'],
                   [17, '여', '성암중']],
                   index=['서준', '도연'],
                   columns=['나이', '성별', '학교'])
df

print(df)
print('-'*50)
print(df.index)
print(df.columns)

df.index = ['학생1', '학생2']
df.columns = ['연령', '남녀', '소속']
# print(df)

df = df.rename(columns={'연령':'나이'})
# print(df)

df = df.rename(index={'학생1':'서준', '학생2':'도연'})
# print(df)

df1 = df['나이']
# print(df1)  # 시리즈

df2 = df[['나이']]
# print(df2)  # 데이터프레임

df.iloc[0,0]    # iloc 숫자인덱스로 좌표찍기

df.loc['서준', '나이']  # loc는 이름으로 좌표 df.loc['행', '렬']

df.loc['진석'] = [18, '남', '신일중']
df.loc['선희'] = [14, '여', '풍문중']
# print(df)


# df.drop(['진석'], inplace=True)  # 원본 df에 반영하는 inplace=True
# df

df.drop(['진석'], inplace=True, axis='rows')
print(df)

df['키'] = [175, 180, 185]  # 컬럼 추가
# df['컬럼명'] = [x, y, z] 인덱스 수에 맞춰 값 입력
df['학년'] = [3, 3, 3]
# print(df)

df.drop(['학년'], axis='columns', inplace=True)  # axis='columns' === axis=1
# print(df)

df2 = df.drop(['키'], inplace=False, axis=1)
# print(df2)
# 원본 df가 아니라 위에 df2로 새로 저장한 df라서 원본df는 그대로임

# 인덱싱 순서 바꿔주기  -  원래 나이 남녀 소속 키 순서
df[['남녀', '소속', '나이', '키']]

df.loc['서준', '나이':'키']

df.iloc[:, 2:3]   # 이거랑

df.iloc[:, 2]   # 이거랑 뭔차이임???? 컬럼명 나오는거 빼고..? 원리가 뭐여..

exam_data = {'이름':['경석', '연주', '선희'],
             '수학':[90, 85, 70],
             '영어':[98, 88, 78],
             '음악':[90, 89, 88],
             '체육':[88, 78, 69]}
df = pd.DataFrame(exam_data)
# print(df)

df.set_index('이름', inplace=True)
# print(df)
print(df.shape)

df.iloc[0,3]  # 경석이의 체육점수
df.iloc[0,3] = 90 # 를 90점으로 바꿔주겠음
# print(df)

df.loc['경석', '체육'] = 100
# print(df)  # 이 방법으로 100점으로 바꿔주겠음 // 방법 2개

df.loc['경석', ['음악', '체육']] = 100  # 경석이의 음악,체육점수를 바꿔주겠음
# print(df)

df = df.transpose()  # 컬럼이랑 인덱스랑 엎어치기
# print(df)          # df = df.T 이렇게 해도됨

df = df.T
# print(df)

ndf1 = df.set_index('음악')  # 음악 컬럼을 인덱스로 삼아버리겠다
print(ndf1)

ndf1.loc[89]

ndf2 = df.set_index(['음악','수학'])
# print(ndf2)

ndf2.iloc[1]

ndf3 = df.reset_index()  # 인덱스 reset 초기화하기
# print(ndf3)

ndf3 = df.reset_index().set_index(['음악'])
# print(ndf3)  # 이렇게 하면 원래 인덱스가 컬럼으로 가고, 컬럼 음악이 인덱스로 온다

ndf = df.reindex(['경석', '연주', '선희', '덕유', '영림'], fill_value=0)
# print(ndf)

ndf = df.sort_index(ascending=False) # index()로 속에 안쓰면 어센딩트루가 디폴트임..
# print(ndf)

ndf = df.sort_values(by='영어')
# print(ndf)


"""## ***연산***"""

student1 = pd.Series({'국어':float('NaN'), '영어':90})
# print(student1)

percentage = student1 / 100
# print(percentage)

student2 = pd.Series({'영어':50, '국어':40, '수학':80})
# print(student2)

# print(student1 + student2)  # 그냥 더하면 없는 값에 더해져서 NaN되거나 하는데
student1.add(student2, fill_value=0)  # add 함수로 사용할 경우 defalut를 설정해줄 수 있음

ndf = df + 100
# print(ndf)

# print(ndf - df)

"""## ***파일 입출력***"""

df.to_csv('./datasets/df_sample.csv')

df = pd.read_csv('./datasets/df_sample.csv', index_col='이름')
# print(df)

df.to_excel('./datasets/df_sample.xlsx')

df2 = pd.read_excel('./datasets/df_sample.xlsx', index_col=0)
# print(df2)

tables = pd.read_html('https://www.w3schools.com/html/html_tables.asp')
print(type(tables))
print(len(tables))

print(tables[0])
print('-'*100)
print(tables[1])

tables[0]
tables[1]

df = pd.read_csv('datasets/auto-mpg.csv', names=['mpg',
                                                 'cylinders',
                                                 'displacement',
                                                 'horsepower',
                                                 'weight',
                                                 'acceleration',
                                                 'model year',
                                                 'origin',
                                                 'name'])

df.head()  # 상위 다섯개  defalut가 5인거고 괄호 안에 숫자 넣으면 그만큼 보여줌
df.tail(10)  # 하위에서 자르기
df.shape
df.describe(include='all')

unique_value = df['name'].value_counts()
unique_value  # 이름이 1개뿐인 유일값은 총 305개

unique_values = df['horsepower'].value_counts()
unique_values.head(40)

print(df.corr())
